{"ast":null,"code":"import { useStore } from 'vuex';\nimport router from \"@/router\"; // 引入useStore 方法\nexport default {\n  setup() {\n    const store = useStore(); // 该方法用于返回store 实例\n    console.log(store); // store 实例对象\n    return {\n      store\n    };\n  },\n  name: \"ChatPage\",\n  created() {\n    console.log('created');\n    this.initWebSocket();\n  },\n  destroyed() {\n    //销毁\n    this.websocketClose();\n  },\n  data() {\n    return {\n      message: {\n        groupId: -1,\n        destinationUserId: '',\n        destinationRegistrationId: '',\n        myMsg: ''\n      },\n      websocket: null,\n      recvMsg: {},\n      msg: ''\n    };\n  },\n  methods: {\n    send() {\n      console.log('send');\n      if (this.message.groupId !== -1) {\n        this.$http.post('/groupOrIndividual', {\n          groupId: this.message.groupId\n        }).then(async e => {\n          for (const key in e.data) {\n            // alert(key+' '+e.data[key])\n            let getBundleResult = await this.store.dispatch('get-key-bundle-of', key);\n            if (getBundleResult) {\n              this.message.destinationUserId = key;\n              this.message.destinationRegistrationId = e.data[key];\n              this.message.groupId = -1;\n              let cipherText = await this.store.dispatch('encrypt-message', this.message);\n              await this.websocketSend(JSON.stringify(cipherText));\n            }\n            // this.store.dispatch('get-key-bundle-of', key)\n            //     .then(result => {\n            //         if(result){\n            //             this.message.destinationUserId = key;\n            //             this.message.destinationRegistrationId = e.data[key];\n            //             this.message.groupId=-1\n            //             this.store.dispatch('encrypt-message', this.message)\n            //                 .then(res => {\n            //                     alert('send'+res)\n            //                     this.websocketSend(JSON.stringify(res));\n            //                 });\n            //         }\n            //     });\n          }\n        });\n      } else {\n        alert('not group');\n        alert(JSON.stringify(this.message));\n        this.store.dispatch('encrypt-message', this.message).then(res => {\n          this.websocketSend(JSON.stringify(res));\n        });\n      }\n    },\n    get() {\n      this.$http.get('/keyOf/' + this.message.destinationUserId).then(response => {\n        console.log(response);\n        this.recvMsg = response.data;\n        this.store.dispatch('process-key', response.data).then(res => {\n          if (res === true) {\n            console.log(\"ok\");\n            return 'ok';\n          }\n        });\n      });\n    },\n    // onConfirm() {\n    //   //需要传输的数据\n    //   let data = {\n    //     code: 1,\n    //     item: '传输数据'\n    //   }\n    //   this.websocketSend(JSON.stringify(data))\n    // },\n    initWebSocket() {\n      // 初始化websocket\n      let url = 'ws://localhost:9090/websocket/' + this.store.getters.getUserId;\n      alert(url);\n      this.websock = new WebSocket(url);\n      this.websock.onmessage = this.websocketOnMessage;\n      this.websock.onerror = this.websocketOnError;\n      // this.websock.onopen = this.websocketOnOpen\n      this.websock.onclose = this.websocketClose;\n    },\n    // websocketOnOpen() { // 连接建立之后执行send方法发送数据\n    //   let data = {\n    //     code: 0,\n    //     msg: {\n    //       userId: this.store.getters.getUserId,\n    //       registrationId: this.store.getters.getRegistrationId,\n    //     }\n    //   }\n    //   // alert('post' + JSON.stringify(data))\n    //   // this.websocketSend(JSON.stringify(data))\n    // },\n    websocketOnError() {\n      console.log('WebSocket连接失败');\n    },\n    websocketOnMessage(e) {\n      // 数据接收\n      alert('receive' + JSON.parse(e.data));\n      // console.log(e);\n      // console.log('数据接收' + e.data)\n      let newMsg = JSON.parse(e.data);\n      alert(newMsg);\n      console.log(newMsg);\n      let decrypted;\n      console.log(\"prepare to decrypt\");\n      // this.store.dispatch('check-info')\n      this.store.dispatch('decrypt-message', newMsg).then(res => {\n        console.log(res);\n        decrypted = res;\n        this.msg = res;\n      });\n      // console.log(decrypted);\n      // alert('你有新消息'+ decrypted);\n    },\n\n    websocketSend(Data) {\n      // 数据发送\n      this.websock.send(Data);\n      alert('send' + Data);\n    },\n    websocketClose(e) {\n      // 关闭\n      console.log('已关闭连接', e);\n    },\n    onStore() {\n      this.store.dispatch('store-info').then(resCode => {\n        console.log(resCode);\n      });\n    },\n    onCheck() {\n      this.store.dispatch('check-info', this.message.destinationUserId).then(resObj => {\n        console.log(resObj);\n      });\n    },\n    onDelete() {\n      this.store.dispatch('delete-info', this.message.destinationUserId).then(res => {\n        console.log(res);\n      });\n    }\n  }\n};","map":{"version":3,"names":["useStore","router","setup","store","console","log","name","created","initWebSocket","destroyed","websocketClose","data","message","groupId","destinationUserId","destinationRegistrationId","myMsg","websocket","recvMsg","msg","methods","send","$http","post","then","e","key","getBundleResult","dispatch","cipherText","websocketSend","JSON","stringify","alert","res","get","response","url","getters","getUserId","websock","WebSocket","onmessage","websocketOnMessage","onerror","websocketOnError","onclose","parse","newMsg","decrypted","Data","onStore","resCode","onCheck","resObj","onDelete"],"sources":["D:\\E2EE\\demo777\\newVision\\E2EE_Project\\front\\E2EE\\src\\components\\ChatPage.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <input type=\"text\" v-model=\"message.destinationUserId\" placeholder=\"destinationUserID\">\r\n    <input type=\"text\" v-model=\"message.destinationRegistrationId\" placeholder=\"destinationRegistrationID\">\r\n    <input type=\"text\" v-model=\"message.groupId\" placeholder=\"groupId\">;\r\n    <input type=\"text\" v-model=\"message.myMsg\" placeholder=\"myMsg\">\r\n    <button v-on:click=\"send\">Send</button>\r\n    <button v-on:click=\"get\">GetKeys</button>\r\n    <div>{{ recvMsg }}</div>\r\n    <div>{{ msg }}</div>\r\n    <div>\r\n      <button v-on:click=\"onStore\">Store</button>\r\n      <button v-on:click=\"onCheck\">Check</button>\r\n      <button v-on:click=\"onDelete\">Delete</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {useStore} from 'vuex'\r\nimport router from \"@/router\"; // 引入useStore 方法\r\nexport default {\r\n  setup() {\r\n    const store = useStore()  // 该方法用于返回store 实例\r\n    console.log(store)  // store 实例对象\r\n    return {store}\r\n  },\r\n  name: \"ChatPage\",\r\n  created() {\r\n    console.log('created')\r\n    this.initWebSocket()\r\n  },\r\n  destroyed() {\r\n    //销毁\r\n    this.websocketClose();\r\n  },\r\n  data() {\r\n    return {\r\n      message: {\r\n        groupId: -1,\r\n        destinationUserId: '',\r\n        destinationRegistrationId: '',\r\n        myMsg: '',\r\n      },\r\n      websocket: null,\r\n      recvMsg: {},\r\n      msg: '',\r\n    }\r\n  },\r\n  methods: {\r\n    send() {\r\n      console.log('send')\r\n\r\n      if (this.message.groupId !== -1) {\r\n        this.$http.post('/groupOrIndividual', {\r\n          groupId: this.message.groupId\r\n        }).then(async e => {\r\n          for (const key in e.data){\r\n            // alert(key+' '+e.data[key])\r\n            let getBundleResult = await this.store.dispatch('get-key-bundle-of', key);\r\n            if(getBundleResult){\r\n              this.message.destinationUserId = key;\r\n              this.message.destinationRegistrationId = e.data[key];\r\n              this.message.groupId=-1;\r\n              let cipherText = await this.store.dispatch('encrypt-message', this.message);\r\n              await this.websocketSend(JSON.stringify(cipherText));\r\n            }\r\n            // this.store.dispatch('get-key-bundle-of', key)\r\n            //     .then(result => {\r\n            //         if(result){\r\n            //             this.message.destinationUserId = key;\r\n            //             this.message.destinationRegistrationId = e.data[key];\r\n            //             this.message.groupId=-1\r\n            //             this.store.dispatch('encrypt-message', this.message)\r\n            //                 .then(res => {\r\n            //                     alert('send'+res)\r\n            //                     this.websocketSend(JSON.stringify(res));\r\n            //                 });\r\n            //         }\r\n            //     });\r\n          }\r\n        })\r\n\r\n      } else {\r\n        alert('not group')\r\n        alert(JSON.stringify(this.message))\r\n        this.store.dispatch('encrypt-message', this.message)\r\n            .then(res => {\r\n              this.websocketSend(JSON.stringify(res));\r\n            });\r\n      }\r\n\r\n\r\n    },\r\n    get() {\r\n      this.$http.get('/keyOf/' + this.message.destinationUserId)\r\n          .then(response => {\r\n            console.log((response));\r\n            this.recvMsg = response.data;\r\n            this.store.dispatch('process-key', response.data)\r\n                .then(res => {\r\n                  if (res === true) {\r\n                    console.log(\"ok\");\r\n                    return 'ok';\r\n                  }\r\n                });\r\n          })\r\n\r\n    },\r\n    // onConfirm() {\r\n    //   //需要传输的数据\r\n    //   let data = {\r\n    //     code: 1,\r\n    //     item: '传输数据'\r\n    //   }\r\n    //   this.websocketSend(JSON.stringify(data))\r\n    // },\r\n    initWebSocket() { // 初始化websocket\r\n      let url = 'ws://localhost:9090/websocket/' + this.store.getters.getUserId;\r\n      alert(url)\r\n      this.websock = new WebSocket(url);\r\n      this.websock.onmessage = this.websocketOnMessage\r\n      this.websock.onerror = this.websocketOnError\r\n      // this.websock.onopen = this.websocketOnOpen\r\n      this.websock.onclose = this.websocketClose\r\n    },\r\n    // websocketOnOpen() { // 连接建立之后执行send方法发送数据\r\n    //   let data = {\r\n    //     code: 0,\r\n    //     msg: {\r\n    //       userId: this.store.getters.getUserId,\r\n    //       registrationId: this.store.getters.getRegistrationId,\r\n    //     }\r\n    //   }\r\n    //   // alert('post' + JSON.stringify(data))\r\n    //   // this.websocketSend(JSON.stringify(data))\r\n    // },\r\n    websocketOnError() {\r\n      console.log('WebSocket连接失败')\r\n    },\r\n    websocketOnMessage(e) { // 数据接收\r\n      alert('receive' + JSON.parse(e.data))\r\n      // console.log(e);\r\n      // console.log('数据接收' + e.data)\r\n      let newMsg = JSON.parse(e.data);\r\n      alert(newMsg)\r\n      console.log(newMsg);\r\n      let decrypted;\r\n      console.log(\"prepare to decrypt\")\r\n      // this.store.dispatch('check-info')\r\n      this.store.dispatch('decrypt-message', newMsg)\r\n          .then(res => {\r\n            console.log(res);\r\n            decrypted = res;\r\n            this.msg = res;\r\n          });\r\n      // console.log(decrypted);\r\n      // alert('你有新消息'+ decrypted);\r\n    },\r\n    websocketSend(Data) { // 数据发送\r\n      this.websock.send(Data)\r\n      alert('send' + Data)\r\n\r\n    },\r\n    websocketClose(e) {  // 关闭\r\n      console.log('已关闭连接', e)\r\n    },\r\n    onStore() {\r\n      this.store.dispatch('store-info')\r\n          .then(resCode => {\r\n            console.log(resCode);\r\n          });\r\n    },\r\n    onCheck() {\r\n      this.store.dispatch('check-info', this.message.destinationUserId)\r\n          .then(resObj => {\r\n            console.log(resObj);\r\n          });\r\n    },\r\n    onDelete() {\r\n      this.store.dispatch('delete-info', this.message.destinationUserId)\r\n          .then(res => {\r\n            console.log(res);\r\n          })\r\n    }\r\n  },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"],"mappings":"AAmBA,SAAQA,QAAQ,QAAO,MAAK;AAC5B,OAAOC,MAAK,MAAO,UAAU,EAAE;AAC/B,eAAe;EACbC,KAAKA,CAAA,EAAG;IACN,MAAMC,KAAI,GAAIH,QAAQ,EAAC,EAAG;IAC1BI,OAAO,CAACC,GAAG,CAACF,KAAK,GAAG;IACpB,OAAO;MAACA;IAAK;EACf,CAAC;EACDG,IAAI,EAAE,UAAU;EAChBC,OAAOA,CAAA,EAAG;IACRH,OAAO,CAACC,GAAG,CAAC,SAAS;IACrB,IAAI,CAACG,aAAa,EAAC;EACrB,CAAC;EACDC,SAASA,CAAA,EAAG;IACV;IACA,IAAI,CAACC,cAAc,EAAE;EACvB,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE;QACPC,OAAO,EAAE,CAAC,CAAC;QACXC,iBAAiB,EAAE,EAAE;QACrBC,yBAAyB,EAAE,EAAE;QAC7BC,KAAK,EAAE;MACT,CAAC;MACDC,SAAS,EAAE,IAAI;MACfC,OAAO,EAAE,CAAC,CAAC;MACXC,GAAG,EAAE;IACP;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,IAAIA,CAAA,EAAG;MACLjB,OAAO,CAACC,GAAG,CAAC,MAAM;MAElB,IAAI,IAAI,CAACO,OAAO,CAACC,OAAM,KAAM,CAAC,CAAC,EAAE;QAC/B,IAAI,CAACS,KAAK,CAACC,IAAI,CAAC,oBAAoB,EAAE;UACpCV,OAAO,EAAE,IAAI,CAACD,OAAO,CAACC;QACxB,CAAC,CAAC,CAACW,IAAI,CAAC,MAAMC,CAAA,IAAK;UACjB,KAAK,MAAMC,GAAE,IAAKD,CAAC,CAACd,IAAI,EAAC;YACvB;YACA,IAAIgB,eAAc,GAAI,MAAM,IAAI,CAACxB,KAAK,CAACyB,QAAQ,CAAC,mBAAmB,EAAEF,GAAG,CAAC;YACzE,IAAGC,eAAe,EAAC;cACjB,IAAI,CAACf,OAAO,CAACE,iBAAgB,GAAIY,GAAG;cACpC,IAAI,CAACd,OAAO,CAACG,yBAAwB,GAAIU,CAAC,CAACd,IAAI,CAACe,GAAG,CAAC;cACpD,IAAI,CAACd,OAAO,CAACC,OAAO,GAAC,CAAC,CAAC;cACvB,IAAIgB,UAAS,GAAI,MAAM,IAAI,CAAC1B,KAAK,CAACyB,QAAQ,CAAC,iBAAiB,EAAE,IAAI,CAAChB,OAAO,CAAC;cAC3E,MAAM,IAAI,CAACkB,aAAa,CAACC,IAAI,CAACC,SAAS,CAACH,UAAU,CAAC,CAAC;YACtD;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;UACF;QACF,CAAC;MAEH,OAAO;QACLI,KAAK,CAAC,WAAW;QACjBA,KAAK,CAACF,IAAI,CAACC,SAAS,CAAC,IAAI,CAACpB,OAAO,CAAC;QAClC,IAAI,CAACT,KAAK,CAACyB,QAAQ,CAAC,iBAAiB,EAAE,IAAI,CAAChB,OAAO,EAC9CY,IAAI,CAACU,GAAE,IAAK;UACX,IAAI,CAACJ,aAAa,CAACC,IAAI,CAACC,SAAS,CAACE,GAAG,CAAC,CAAC;QACzC,CAAC,CAAC;MACR;IAGF,CAAC;IACDC,GAAGA,CAAA,EAAG;MACJ,IAAI,CAACb,KAAK,CAACa,GAAG,CAAC,SAAQ,GAAI,IAAI,CAACvB,OAAO,CAACE,iBAAiB,EACpDU,IAAI,CAACY,QAAO,IAAK;QAChBhC,OAAO,CAACC,GAAG,CAAE+B,QAAQ,CAAE;QACvB,IAAI,CAAClB,OAAM,GAAIkB,QAAQ,CAACzB,IAAI;QAC5B,IAAI,CAACR,KAAK,CAACyB,QAAQ,CAAC,aAAa,EAAEQ,QAAQ,CAACzB,IAAI,EAC3Ca,IAAI,CAACU,GAAE,IAAK;UACX,IAAIA,GAAE,KAAM,IAAI,EAAE;YAChB9B,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC;YACjB,OAAO,IAAI;UACb;QACF,CAAC,CAAC;MACR,CAAC;IAEP,CAAC;IACD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAG,aAAaA,CAAA,EAAG;MAAE;MAChB,IAAI6B,GAAE,GAAI,gCAA+B,GAAI,IAAI,CAAClC,KAAK,CAACmC,OAAO,CAACC,SAAS;MACzEN,KAAK,CAACI,GAAG;MACT,IAAI,CAACG,OAAM,GAAI,IAAIC,SAAS,CAACJ,GAAG,CAAC;MACjC,IAAI,CAACG,OAAO,CAACE,SAAQ,GAAI,IAAI,CAACC,kBAAiB;MAC/C,IAAI,CAACH,OAAO,CAACI,OAAM,GAAI,IAAI,CAACC,gBAAe;MAC3C;MACA,IAAI,CAACL,OAAO,CAACM,OAAM,GAAI,IAAI,CAACpC,cAAa;IAC3C,CAAC;IACD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAmC,gBAAgBA,CAAA,EAAG;MACjBzC,OAAO,CAACC,GAAG,CAAC,eAAe;IAC7B,CAAC;IACDsC,kBAAkBA,CAAClB,CAAC,EAAE;MAAE;MACtBQ,KAAK,CAAC,SAAQ,GAAIF,IAAI,CAACgB,KAAK,CAACtB,CAAC,CAACd,IAAI,CAAC;MACpC;MACA;MACA,IAAIqC,MAAK,GAAIjB,IAAI,CAACgB,KAAK,CAACtB,CAAC,CAACd,IAAI,CAAC;MAC/BsB,KAAK,CAACe,MAAM;MACZ5C,OAAO,CAACC,GAAG,CAAC2C,MAAM,CAAC;MACnB,IAAIC,SAAS;MACb7C,OAAO,CAACC,GAAG,CAAC,oBAAoB;MAChC;MACA,IAAI,CAACF,KAAK,CAACyB,QAAQ,CAAC,iBAAiB,EAAEoB,MAAM,EACxCxB,IAAI,CAACU,GAAE,IAAK;QACX9B,OAAO,CAACC,GAAG,CAAC6B,GAAG,CAAC;QAChBe,SAAQ,GAAIf,GAAG;QACf,IAAI,CAACf,GAAE,GAAIe,GAAG;MAChB,CAAC,CAAC;MACN;MACA;IACF,CAAC;;IACDJ,aAAaA,CAACoB,IAAI,EAAE;MAAE;MACpB,IAAI,CAACV,OAAO,CAACnB,IAAI,CAAC6B,IAAI;MACtBjB,KAAK,CAAC,MAAK,GAAIiB,IAAI;IAErB,CAAC;IACDxC,cAAcA,CAACe,CAAC,EAAE;MAAG;MACnBrB,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEoB,CAAC;IACxB,CAAC;IACD0B,OAAOA,CAAA,EAAG;MACR,IAAI,CAAChD,KAAK,CAACyB,QAAQ,CAAC,YAAY,EAC3BJ,IAAI,CAAC4B,OAAM,IAAK;QACfhD,OAAO,CAACC,GAAG,CAAC+C,OAAO,CAAC;MACtB,CAAC,CAAC;IACR,CAAC;IACDC,OAAOA,CAAA,EAAG;MACR,IAAI,CAAClD,KAAK,CAACyB,QAAQ,CAAC,YAAY,EAAE,IAAI,CAAChB,OAAO,CAACE,iBAAiB,EAC3DU,IAAI,CAAC8B,MAAK,IAAK;QACdlD,OAAO,CAACC,GAAG,CAACiD,MAAM,CAAC;MACrB,CAAC,CAAC;IACR,CAAC;IACDC,QAAQA,CAAA,EAAG;MACT,IAAI,CAACpD,KAAK,CAACyB,QAAQ,CAAC,aAAa,EAAE,IAAI,CAAChB,OAAO,CAACE,iBAAiB,EAC5DU,IAAI,CAACU,GAAE,IAAK;QACX9B,OAAO,CAACC,GAAG,CAAC6B,GAAG,CAAC;MAClB,CAAC;IACP;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}